// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_chekmate/test/features/messages/domain/usecases/send_message_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_chekmate/features/messages/domain/entities/conversation_entity.dart'
    as _i6;
import 'package:flutter_chekmate/features/messages/domain/entities/message_entity.dart'
    as _i5;
import 'package:flutter_chekmate/features/messages/domain/repositories/messages_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MessagesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessagesRepository extends _i1.Mock
    implements _i2.MessagesRepository {
  MockMessagesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> sendMessage({
    required String? conversationId,
    required String? senderId,
    required String? senderName,
    required String? senderAvatar,
    required String? receiverId,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #conversationId: conversationId,
            #senderId: senderId,
            #senderName: senderName,
            #senderAvatar: senderAvatar,
            #receiverId: receiverId,
            #content: content,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #sendMessage,
            [],
            {
              #conversationId: conversationId,
              #senderId: senderId,
              #senderName: senderName,
              #senderAvatar: senderAvatar,
              #receiverId: receiverId,
              #content: content,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> sendVoiceMessage({
    required String? conversationId,
    required String? senderId,
    required String? senderName,
    required String? senderAvatar,
    required String? receiverId,
    required String? voiceUrl,
    required int? voiceDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendVoiceMessage,
          [],
          {
            #conversationId: conversationId,
            #senderId: senderId,
            #senderName: senderName,
            #senderAvatar: senderAvatar,
            #receiverId: receiverId,
            #voiceUrl: voiceUrl,
            #voiceDuration: voiceDuration,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #sendVoiceMessage,
            [],
            {
              #conversationId: conversationId,
              #senderId: senderId,
              #senderName: senderName,
              #senderAvatar: senderAvatar,
              #receiverId: receiverId,
              #voiceUrl: voiceUrl,
              #voiceDuration: voiceDuration,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> sendImageMessage({
    required String? conversationId,
    required String? senderId,
    required String? senderName,
    required String? senderAvatar,
    required String? receiverId,
    required String? imageUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendImageMessage,
          [],
          {
            #conversationId: conversationId,
            #senderId: senderId,
            #senderName: senderName,
            #senderAvatar: senderAvatar,
            #receiverId: receiverId,
            #imageUrl: imageUrl,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #sendImageMessage,
            [],
            {
              #conversationId: conversationId,
              #senderId: senderId,
              #senderName: senderName,
              #senderAvatar: senderAvatar,
              #receiverId: receiverId,
              #imageUrl: imageUrl,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Stream<List<_i5.MessageEntity>> getMessages(
    String? conversationId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [conversationId],
          {#limit: limit},
        ),
        returnValue: _i3.Stream<List<_i5.MessageEntity>>.empty(),
      ) as _i3.Stream<List<_i5.MessageEntity>>);

  @override
  _i3.Stream<List<_i6.ConversationEntity>> getConversations(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversations,
          [userId],
        ),
        returnValue: _i3.Stream<List<_i6.ConversationEntity>>.empty(),
      ) as _i3.Stream<List<_i6.ConversationEntity>>);

  @override
  _i3.Future<void> markAsRead({
    required String? messageId,
    required String? conversationId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsRead,
          [],
          {
            #messageId: messageId,
            #conversationId: conversationId,
            #userId: userId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> markConversationAsRead({
    required String? conversationId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markConversationAsRead,
          [],
          {
            #conversationId: conversationId,
            #userId: userId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMessage({
    required String? messageId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [],
          {
            #messageId: messageId,
            #userId: userId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> getOrCreateConversation({
    required String? userId1,
    required String? userId2,
    required String? user1Name,
    required String? user2Name,
    required String? user1Avatar,
    required String? user2Avatar,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrCreateConversation,
          [],
          {
            #userId1: userId1,
            #userId2: userId2,
            #user1Name: user1Name,
            #user2Name: user2Name,
            #user1Avatar: user1Avatar,
            #user2Avatar: user2Avatar,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getOrCreateConversation,
            [],
            {
              #userId1: userId1,
              #userId2: userId2,
              #user1Name: user1Name,
              #user2Name: user2Name,
              #user1Avatar: user1Avatar,
              #user2Avatar: user2Avatar,
            },
          ),
        )),
      ) as _i3.Future<String>);
}
