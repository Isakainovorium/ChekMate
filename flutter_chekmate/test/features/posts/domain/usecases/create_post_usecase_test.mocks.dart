// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_chekmate/test/features/posts/domain/usecases/create_post_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:flutter_chekmate/features/posts/domain/entities/post_entity.dart'
    as _i2;
import 'package:flutter_chekmate/features/posts/domain/repositories/posts_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostEntity_0 extends _i1.SmartFake implements _i2.PostEntity {
  _FakePostEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsRepository extends _i1.Mock implements _i3.PostsRepository {
  MockPostsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PostEntity> createPost({
    required String? userId,
    required String? username,
    required String? userAvatar,
    required String? content,
    List<_i5.Uint8List>? images,
    _i5.Uint8List? video,
    String? location,
    List<String>? tags,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [],
          {
            #userId: userId,
            #username: username,
            #userAvatar: userAvatar,
            #content: content,
            #images: images,
            #video: video,
            #location: location,
            #tags: tags,
          },
        ),
        returnValue: _i4.Future<_i2.PostEntity>.value(_FakePostEntity_0(
          this,
          Invocation.method(
            #createPost,
            [],
            {
              #userId: userId,
              #username: username,
              #userAvatar: userAvatar,
              #content: content,
              #images: images,
              #video: video,
              #location: location,
              #tags: tags,
            },
          ),
        )),
      ) as _i4.Future<_i2.PostEntity>);

  @override
  _i4.Future<_i2.PostEntity> getPost(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #getPost,
          [postId],
        ),
        returnValue: _i4.Future<_i2.PostEntity>.value(_FakePostEntity_0(
          this,
          Invocation.method(
            #getPost,
            [postId],
          ),
        )),
      ) as _i4.Future<_i2.PostEntity>);

  @override
  _i4.Stream<List<_i2.PostEntity>> getPosts({
    int? limit = 20,
    String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
          {
            #limit: limit,
            #userId: userId,
          },
        ),
        returnValue: _i4.Stream<List<_i2.PostEntity>>.empty(),
      ) as _i4.Stream<List<_i2.PostEntity>>);

  @override
  _i4.Stream<List<_i2.PostEntity>> getUserPosts({
    required String? userId,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserPosts,
          [],
          {
            #userId: userId,
            #limit: limit,
          },
        ),
        returnValue: _i4.Stream<List<_i2.PostEntity>>.empty(),
      ) as _i4.Stream<List<_i2.PostEntity>>);

  @override
  _i4.Future<void> likePost({
    required String? postId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #likePost,
          [],
          {
            #postId: postId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unlikePost({
    required String? postId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlikePost,
          [],
          {
            #postId: postId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> bookmarkPost({
    required String? postId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #bookmarkPost,
          [],
          {
            #postId: postId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unbookmarkPost({
    required String? postId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #unbookmarkPost,
          [],
          {
            #postId: postId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deletePost({
    required String? postId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [],
          {
            #postId: postId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.PostEntity> updatePost({
    required String? postId,
    required String? userId,
    String? content,
    String? location,
    List<String>? tags,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [],
          {
            #postId: postId,
            #userId: userId,
            #content: content,
            #location: location,
            #tags: tags,
          },
        ),
        returnValue: _i4.Future<_i2.PostEntity>.value(_FakePostEntity_0(
          this,
          Invocation.method(
            #updatePost,
            [],
            {
              #postId: postId,
              #userId: userId,
              #content: content,
              #location: location,
              #tags: tags,
            },
          ),
        )),
      ) as _i4.Future<_i2.PostEntity>);

  @override
  _i4.Future<void> sharePost({
    required String? postId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sharePost,
          [],
          {
            #postId: postId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> hasLikedPost({
    required String? postId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasLikedPost,
          [],
          {
            #postId: postId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasBookmarkedPost({
    required String? postId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasBookmarkedPost,
          [],
          {
            #postId: postId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
