// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_chekmate/test/features/stories/domain/usecases/create_story_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_chekmate/features/stories/domain/entities/story_entity.dart'
    as _i2;
import 'package:flutter_chekmate/features/stories/domain/repositories/story_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStoryEntity_0 extends _i1.SmartFake implements _i2.StoryEntity {
  _FakeStoryEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoryRepository extends _i1.Mock implements _i3.StoryRepository {
  MockStoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.StoryUserEntity>> getFollowingStories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFollowingStories,
          [],
        ),
        returnValue: _i4.Future<List<_i2.StoryUserEntity>>.value(
            <_i2.StoryUserEntity>[]),
      ) as _i4.Future<List<_i2.StoryUserEntity>>);

  @override
  _i4.Future<List<_i2.StoryEntity>> getMyStories() => (super.noSuchMethod(
        Invocation.method(
          #getMyStories,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.StoryEntity>>.value(<_i2.StoryEntity>[]),
      ) as _i4.Future<List<_i2.StoryEntity>>);

  @override
  _i4.Future<List<_i2.StoryEntity>> getUserStories(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserStories,
          [userId],
        ),
        returnValue:
            _i4.Future<List<_i2.StoryEntity>>.value(<_i2.StoryEntity>[]),
      ) as _i4.Future<List<_i2.StoryEntity>>);

  @override
  _i4.Future<_i2.StoryEntity> createStory({
    required _i2.StoryType? type,
    required String? filePath,
    String? text,
    String? textColor,
    String? textPosition,
    int? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createStory,
          [],
          {
            #type: type,
            #filePath: filePath,
            #text: text,
            #textColor: textColor,
            #textPosition: textPosition,
            #duration: duration,
          },
        ),
        returnValue: _i4.Future<_i2.StoryEntity>.value(_FakeStoryEntity_0(
          this,
          Invocation.method(
            #createStory,
            [],
            {
              #type: type,
              #filePath: filePath,
              #text: text,
              #textColor: textColor,
              #textPosition: textPosition,
              #duration: duration,
            },
          ),
        )),
      ) as _i4.Future<_i2.StoryEntity>);

  @override
  _i4.Future<void> deleteStory(String? storyId) => (super.noSuchMethod(
        Invocation.method(
          #deleteStory,
          [storyId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markAsViewed(String? storyId) => (super.noSuchMethod(
        Invocation.method(
          #markAsViewed,
          [storyId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> likeStory(String? storyId) => (super.noSuchMethod(
        Invocation.method(
          #likeStory,
          [storyId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unlikeStory(String? storyId) => (super.noSuchMethod(
        Invocation.method(
          #unlikeStory,
          [storyId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<String>> getStoryViewers(String? storyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoryViewers,
          [storyId],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<List<String>> getStoryLikes(String? storyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoryLikes,
          [storyId],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<String> uploadStoryMedia(
    String? filePath,
    _i2.StoryType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadStoryMedia,
          [
            filePath,
            type,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #uploadStoryMedia,
            [
              filePath,
              type,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> deleteExpiredStories() => (super.noSuchMethod(
        Invocation.method(
          #deleteExpiredStories,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
