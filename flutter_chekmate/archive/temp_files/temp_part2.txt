// Result Item Widgets - Outside main State class
class _PostResultItem extends StatelessWidget {
  const _PostResultItem({required this.post});
  
  final SearchResultPost post;

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: const Icon(Icons.article),
      title: Text(post.title),
      subtitle: Text(post.content),
      trailing: Text(_formatTimestamp(post.timestamp)),
      onTap: () => _navigateToPost(context, post.id),
    );
  }

  String _formatTimestamp(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    if (difference.inDays > 0) return '${difference.inDays}d ago';
    if (difference.inHours > 0) return '${difference.inHours}h ago';
    return '${difference.inMinutes}m ago';
  }

  void _navigateToPost(BuildContext context, String postId) {
    Navigator.pushNamed(context, '/post/$postId');
  }
}

class _UserResultItem extends StatelessWidget {
  const _UserResultItem({required this.user});
  
  final SearchResultUser user;

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: const AppAvatar(
        imageUrl: 'https://via.placeholder.com/40',
        size: AppAvatarSize.medium,
      ),
      title: Text(user.name),
      subtitle: Text('@${user.username} • ${user.followers} followers'),
      trailing: AppButton(
        variant: AppButtonVariant.outline,
        onPressed: () => _followUser(user.id),
        child: const Text('Follow'),
      ),
      onTap: () => _navigateToProfile(context, user.id),
    );
  }

  void _followUser(String userId) {
    // Implement follow user
  }

  void _navigateToProfile(BuildContext context, String userId) {
    Navigator.pushNamed(context, '/profile/$userId');
  }
}

class _VideoResultItem extends StatelessWidget {
  const _VideoResultItem({required this.video});
  
  final SearchResultVideo video;

  @override
  Widget build(BuildContext context) {
    return AppCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          AspectRatio(
            aspectRatio: 16 / 9,
            child: Container(
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.surfaceVariant,
                borderRadius: const BorderRadius.vertical(top: Radius.circular(12)),
              ),
              child: const Center(
                child: Icon(Icons.play_circle_fill, size: 40),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(AppSpacing.sm),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  video.title,
                  style: Theme.of(context).textTheme.bodyMedium,
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                const SizedBox(height: AppSpacing.xs),
                Text(
                  '${video.views} views • ${video.duration.inMinutes}:${(video.duration.inSeconds % 60).toString().padLeft(2, '0')}',
                  style: Theme.of(context).textTheme.bodySmall,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class _ImageResultItem extends StatelessWidget {
  const _ImageResultItem({required this.image});
  
  final SearchResultImage image;

  @override
  Widget build(BuildContext context) {
    return AspectRatio(
      aspectRatio: 1,
      child: Container(
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.surfaceVariant,
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Center(
          child: Icon(Icons.image),
        ),
      ),
    );
  }
}

class _EventResultItem extends StatelessWidget {
  const _EventResultItem({required this.event});
  
  final SearchResultEvent event;

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: const Icon(Icons.event),
      title: Text(event.title),
      subtitle: Text('${event.date.day}/${event.date.month}/${event.date.year} • ${event.attendees} attending'),
      trailing: AppButton(
        variant: AppButtonVariant.outline,
        onPressed: () => _joinEvent(event.id),
        child: const Text('Join'),
      ),
      onTap: () => _navigateToEvent(context, event.id),
    );
  }

  void _joinEvent(String eventId) {
    // Implement join event
  }

  void _navigateToEvent(BuildContext context, String eventId) {
    Navigator.pushNamed(context, '/event/$eventId');
  }
}

// Data Models
class TrendingTopic {
  const TrendingTopic({
    required this.name,
    required this.posts,
  });
  
  final String name;
  final int posts;
}

class SearchResultsData {
  const SearchResultsData({
    required this.query,
    required this.totalResults,
    required this.posts,
    required this.users,
    required this.videos,
    required this.images,
    required this.events,
  });

  final String query;
  final int totalResults;
  final List<SearchResultPost> posts;
  final List<SearchResultUser> users;
  final List<SearchResultVideo> videos;
  final List<SearchResultImage> images;
  final List<SearchResultEvent> events;
}

class SearchResultPost {
  const SearchResultPost({
    required this.id,
    required this.title,
    required this.content,
    required this.author,
    required this.timestamp,
  });

  final String id;
  final String title;
  final String content;
  final String author;
  final DateTime timestamp;
}

class SearchResultUser {
  const SearchResultUser({
    required this.id,
    required this.name,
    required this.username,
    required this.bio,
    required this.followers,
  });

  final String id;
  final String name;
  final String username;
  final String bio;
  final int followers;
}

class SearchResultVideo {
  const SearchResultVideo({
    required this.id,
    required this.title,
    required this.duration,
    required this.views,
  });

  final String id;
  final String title;
  final Duration duration;
  final int views;
}

class SearchResultImage {
  const SearchResultImage({
    required this.id,
    required this.title,
    required this.url,
  });

  final String id;
  final String title;
  final String url;
}

class SearchResultEvent {
  const SearchResultEvent({
    required this.id,
    required this.title,
    required this.date,
    required this.attendees,
  });

  final String id;
  final String title;
  final DateTime date;
  final int attendees;
}

  void _viewAllResults(String type) {
    // Navigate to specific results tab
    switch (type) {
      case 'posts':
        _tabController.animateTo(1);
        break;
      case 'users':
        _tabController.animateTo(2);
        break;
      // Add other cases...
    }
  }

  SearchResultsData _generateMockResults(String query) {
    // Generate mock search results
    return SearchResultsData(
      query: query,
      totalResults: 1234,
      posts: List.generate(20, (i) => SearchResultPost(
        id: 'post_$i',
        title: 'Post about $query $i',
        content: 'This is a post content about $query...',
        author: 'User $i',
        timestamp: DateTime.now().subtract(Duration(hours: i)),
      )),
      users: List.generate(10, (i) => SearchResultUser(
        id: 'user_$i',
        name: 'User $i',
        username: 'user$i',
        bio: 'Bio about $query',
        followers: i * 100,
      )),
      videos: List.generate(15, (i) => SearchResultVideo(
        id: 'video_$i',
        title: 'Video about $query $i',
        duration: Duration(minutes: i + 1),
        views: i * 1000,
      )),
      images: List.generate(30, (i) => SearchResultImage(
        id: 'image_$i',
        title: 'Image $i',
        url: 'https://via.placeholder.com/200',
      )),
      events: List.generate(5, (i) => SearchResultEvent(
        id: 'event_$i',
        title: 'Event about $query $i',
        date: DateTime.now().add(Duration(days: i)),
        attendees: i * 50,
      )),
    );
  }

