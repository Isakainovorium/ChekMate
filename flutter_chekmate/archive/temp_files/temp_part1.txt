import 'package:flutter/material.dart';

import 'package:flutter_chekmate/core/theme/app_spacing.dart';
import 'package:flutter_chekmate/shared/ui/index.dart';
import 'package:flutter_chekmate/shared/widgets/search_bar.dart';

/// SearchPage - Comprehensive search with results and filters
/// 
/// Features:
/// - Real-time search with suggestions
/// - Tabbed results (All, Posts, Users, Videos, Images, Events)
/// - Recent searches and trending topics
/// - Clean, modern Material 3 design
class SearchPage extends StatefulWidget {
  const SearchPage({
    super.key,
    this.initialQuery,
  });

  final String? initialQuery;

  @override
  State<SearchPage> createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> with TickerProviderStateMixin {
  late final TabController _tabController;
  final TextEditingController _searchController = TextEditingController();

  String _currentQuery = '';
  bool _isLoading = false;
  SearchResultsData? _results;

  static const _tabs = [
    'All',
    'Posts',
    'Users',
    'Videos',
    'Images',
    'Events',
  ];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: _tabs.length, vsync: this);
    _currentQuery = widget.initialQuery ?? '';
    _searchController.text = _currentQuery;
    
    if (_currentQuery.isNotEmpty) {
      _performSearch(_currentQuery);
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Search'),
        elevation: 0,
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(80),
          child: Padding(
            padding: const EdgeInsets.all(AppSpacing.md),
            child: AppSearchBar(
              controller: _searchController,
              placeholder: 'Search posts, users, topics...',
              onSearch: _performSearch,
              suggestions: _getSearchSuggestions(),
              autofocus: _currentQuery.isEmpty,
            ),
          ),
        ),
      ),
      body: _currentQuery.isEmpty
          ? _buildEmptyState()
          : _isLoading
              ? _buildLoadingState()
              : _results == null
                  ? _buildNoResultsState()
                  : _buildResultsView(),
    );
  }

  Widget _buildEmptyState() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(AppSpacing.lg),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildRecentSearches(),
          const SizedBox(height: AppSpacing.xl),
          _buildTrendingTopics(),
          const SizedBox(height: AppSpacing.xl),
          _buildSuggestedUsers(),
        ],
      ),
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(),
          SizedBox(height: AppSpacing.md),
          Text('Searching...'),
        ],
      ),
    );
  }

  Widget _buildNoResultsState() {
    final theme = Theme.of(context);
    
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(AppSpacing.xl),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.search_off,
              size: 64,
              color: theme.colorScheme.onSurfaceVariant,
            ),
            const SizedBox(height: AppSpacing.lg),
            Text(
              'No results found',
              style: theme.textTheme.headlineSmall?.copyWith(
                color: theme.colorScheme.onSurfaceVariant,
              ),
            ),
            const SizedBox(height: AppSpacing.sm),
            Text(
              'Try adjusting your search terms',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurfaceVariant,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: AppSpacing.lg),
            AppButton(
              variant: AppButtonVariant.outline,
              onPressed: _clearSearch,
              child: const Text('Clear Search'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildResultsView() {
    return Column(
      children: [
        // Results summary
        Container(
          padding: const EdgeInsets.all(AppSpacing.md),
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.3),
            border: Border(
              bottom: BorderSide(
                color: Theme.of(context).colorScheme.outline.withOpacity(0.2),
              ),
            ),
          ),
          child: Row(
            children: [
              Text(
                '${_results!.totalResults} results for "$_currentQuery"',
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  fontWeight: FontWeight.w500,
                ),
              ),
              const Spacer(),
              _buildSortButton(),
            ],
          ),
        ),

        // Tab bar
        TabBar(
          controller: _tabController,
          isScrollable: true,
          labelColor: Theme.of(context).colorScheme.primary,
          unselectedLabelColor: Theme.of(context).colorScheme.onSurfaceVariant,
          indicatorColor: Theme.of(context).colorScheme.primary,
          tabs: [
            Tab(text: 'All (${_results!.totalResults})'),
            Tab(text: 'Posts (${_results!.posts.length})'),
            Tab(text: 'Users (${_results!.users.length})'),
            Tab(text: 'Videos (${_results!.videos.length})'),
            Tab(text: 'Images (${_results!.images.length})'),
            Tab(text: 'Events (${_results!.events.length})'),
          ],
        ),

        // Tab content
        Expanded(
          child: TabBarView(
            controller: _tabController,
            children: [
              _buildAllResultsTab(),
              _buildPostsTab(),
              _buildUsersTab(),
              _buildVideosTab(),
              _buildImagesTab(),
              _buildEventsTab(),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildRecentSearches() {
    final theme = Theme.of(context);
    const recentSearches = ['flutter development', 'ui design', 'photography'];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'Recent Searches',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            TextButton(
              onPressed: _clearRecentSearches,
              child: const Text('Clear All'),
            ),
          ],
        ),
        const SizedBox(height: AppSpacing.sm),
        ...recentSearches.map((search) => ListTile(
              leading: const Icon(Icons.history),
              title: Text(search),
              trailing: IconButton(
                icon: const Icon(Icons.close),
                onPressed: () => _removeRecentSearch(search),
              ),
              onTap: () => _performSearch(search),
            )),
      ],
    );
  }

  Widget _buildTrendingTopics() {
    final theme = Theme.of(context);
    final trendingTopics = [
      const TrendingTopic(name: 'Technology', posts: 1234),
      const TrendingTopic(name: 'Photography', posts: 856),
      const TrendingTopic(name: 'Travel', posts: 642),
      const TrendingTopic(name: 'Food', posts: 523),
    ];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Trending Topics',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: AppSpacing.sm),
        ...trendingTopics.map((topic) => ListTile(
              leading: const Icon(Icons.trending_up),
              title: Text(topic.name),
              subtitle: Text('${topic.posts} posts'),
              onTap: () => _performSearch(topic.name),
            )),
      ],
    );
  }

  Widget _buildSuggestedUsers() {
    final theme = Theme.of(context);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Suggested Users',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: AppSpacing.sm),
        SizedBox(
          height: 100,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: 5,
            itemBuilder: (context, index) {
              return Container(
                width: 80,
                margin: const EdgeInsets.only(right: AppSpacing.md),
                child: Column(
                  children: [
                    const AppAvatar(
                      imageUrl: 'https://via.placeholder.com/50',
                      size: AppAvatarSize.large,
                    ),
                    const SizedBox(height: AppSpacing.xs),
                    Text(
                      'User $index',
                      style: theme.textTheme.bodySmall,
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildSortButton() {
    return PopupMenuButton<String>(
      icon: const Icon(Icons.sort),
      onSelected: _changeSortOrder,
      itemBuilder: (context) => [
        const PopupMenuItem(value: 'relevance', child: Text('Most Relevant')),
        const PopupMenuItem(value: 'recent', child: Text('Most Recent')),
        const PopupMenuItem(value: 'popular', child: Text('Most Popular')),
        const PopupMenuItem(value: 'oldest', child: Text('Oldest First')),
      ],
    );
  }

  Widget _buildAllResultsTab() {
    return ListView(
      padding: const EdgeInsets.all(AppSpacing.md),
      children: [
        if (_results!.posts.isNotEmpty) ...[
          _buildSectionHeader('Posts', _results!.posts.length),
          ..._results!.posts.take(3).map((post) => _PostResultItem(post: post)),
          if (_results!.posts.length > 3)
            _buildViewAllButton('posts', _results!.posts.length - 3),
          const SizedBox(height: AppSpacing.lg),
        ],

        if (_results!.users.isNotEmpty) ...[
          _buildSectionHeader('Users', _results!.users.length),
          ..._results!.users.take(3).map((user) => _UserResultItem(user: user)),
          if (_results!.users.length > 3)
            _buildViewAllButton('users', _results!.users.length - 3),
          const SizedBox(height: AppSpacing.lg),
        ],
      ],
    );
  }

  Widget _buildPostsTab() {
    final posts = _results!.posts;
    return AppVirtualizedList<SearchResultPost>(
      items: posts,
      itemBuilder: (context, post, index) => _PostResultItem(post: post),
      separatorBuilder: (context, index) => const Divider(),
    );
  }

  Widget _buildUsersTab() {
    final users = _results!.users;
    return AppVirtualizedList<SearchResultUser>(
      items: users,
      itemBuilder: (context, user, index) => _UserResultItem(user: user),
      separatorBuilder: (context, index) => const Divider(),
    );
  }

  Widget _buildVideosTab() {
    final videos = _results!.videos;
    return AppGridVirtualizedList<SearchResultVideo>(
      items: videos,
      crossAxisCount: 2,
      itemBuilder: (context, video, index) => _VideoResultItem(video: video),
      mainAxisSpacing: AppSpacing.sm,
      crossAxisSpacing: AppSpacing.sm,
    );
  }

  Widget _buildImagesTab() {
    final images = _results!.images;
    return AppGridVirtualizedList<SearchResultImage>(
      items: images,
      crossAxisCount: 3,
      itemBuilder: (context, image, index) => _ImageResultItem(image: image),
      mainAxisSpacing: AppSpacing.xs,
      crossAxisSpacing: AppSpacing.xs,
    );
  }

  Widget _buildEventsTab() {
    final events = _results!.events;
    return AppVirtualizedList<SearchResultEvent>(
      items: events,
      itemBuilder: (context, event, index) => _EventResultItem(event: event),
      separatorBuilder: (context, index) => const Divider(),
    );
  }

  Widget _buildSectionHeader(String title, int count) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: AppSpacing.sm),
      child: Row(
        children: [
          Text(
            title,
            style: Theme.of(context).textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(width: AppSpacing.sm),
          AppBadge(
            label: count.toString(),
            variant: AppBadgeVariant.secondary,
          ),
        ],
      ),
    );
  }

  Widget _buildViewAllButton(String type, int remainingCount) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: AppSpacing.sm),
      child: TextButton(
        onPressed: () => _viewAllResults(type),
        child: Text('View all $remainingCount more $type'),
      ),
    );
  }

  // Helper methods
  List<SearchSuggestion> _getSearchSuggestions() {
    return [
      const SearchSuggestion(
        text: 'flutter development',
        subtitle: 'Popular search',
        icon: Icons.code,
        type: 'Trending',
      ),
      const SearchSuggestion(
        text: 'ui design patterns',
        subtitle: '1.2k results',
        icon: Icons.design_services,
        type: 'Topic',
      ),
      const SearchSuggestion(
        text: 'mobile photography',
        subtitle: '856 results',
        icon: Icons.camera_alt,
        type: 'Topic',
      ),
    ];
  }

  void _performSearch(String query) {
    setState(() {
      _currentQuery = query;
      _isLoading = true;
    });

    // Simulate search API call
    Future.delayed(const Duration(seconds: 1), () {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _results = _generateMockResults(query);
        });
      }
    });
  }

  void _clearRecentSearches() {
    // Implement clear recent searches
  }

  void _removeRecentSearch(String search) {
    // Implement remove recent search
  }

  void _changeSortOrder(String sortOrder) {
    // Implement sort order change
  }

  SearchResultsData _generateMockResults(String query) {
    // Generate mock search results
    return SearchResultsData(
      query: query,
      totalResults: 1234,
      posts: List.generate(20, (i) => SearchResultPost(
        id: 'post_$i',
        title: 'Post about $query $i',
        content: 'This is a post content about $query...',
        author: 'User $i',
        timestamp: DateTime.now().subtract(Duration(hours: i)),
      )),
      users: List.generate(10, (i) => SearchResultUser(
        id: 'user_$i',
        name: 'User $i',
        username: 'user$i',
        bio: 'Bio about $query',
        followers: i * 100,
      )),
      videos: List.generate(15, (i) => SearchResultVideo(
        id: 'video_$i',
        title: 'Video about $query $i',
        duration: Duration(minutes: i + 1),
        views: i * 1000,
      )),
      images: List.generate(30, (i) => SearchResultImage(
        id: 'image_$i',
        title: 'Image $i',
        url: 'https://via.placeholder.com/200',
      )),
      events: List.generate(5, (i) => SearchResultEvent(
        id: 'event_$i',
        title: 'Event about $query $i',
        date: DateTime.now().add(Duration(days: i)),
        attendees: i * 50,
      )),
    );
  }
